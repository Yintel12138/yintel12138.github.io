<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法能力提升计划（这一次我要拿回属于我的一切 太中二了）</title>
    <link href="/2024/04/01/Algorithm-Improve/"/>
    <url>/2024/04/01/Algorithm-Improve/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面：<br>督促自己学习，顺便记录题解</p></blockquote><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><ul><li>4&#x2F;7 更新<a href="https://leetcode.cn/problems/h-index/">274. H 指数</a>、<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a>、<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></li><li>4&#x2F;3 更新<a href="https://leetcode.cn/problems/3sum-closest/">16. 最接近的三数之和</a></li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>[[#<a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a>|<a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a>|<a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a>|<a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/existence-of-a-substring-in-a-string-and-its-reverse/">3083. 字符串及其反转中是否存在同一子字符串</a>|<a href="https://leetcode.cn/problems/existence-of-a-substring-in-a-string-and-its-reverse/">3083. 字符串及其反转中是否存在同一子字符串</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/count-substrings-starting-and-ending-with-given-character/">3084. 统计以给定字符开头和结尾的子字符串总数</a>|<a href="https://leetcode.cn/problems/count-substrings-starting-and-ending-with-given-character/">3084. 统计以给定字符开头和结尾的子字符串总数</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/lexicographically-smallest-palindrome/">2697. 字典序最小回文串</a>|<a href="https://leetcode.cn/problems/lexicographically-smallest-palindrome/">2697. 字典序最小回文串</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/construct-smallest-number-from-di-string/">2375. 根据模式串构造最小数字</a>|<a href="https://leetcode.cn/problems/construct-smallest-number-from-di-string/">2375. 根据模式串构造最小数字</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/node-with-highest-edge-score/">2374. 边积分最高的节点</a>|<a href="https://leetcode.cn/problems/node-with-highest-edge-score/">2374. 边积分最高的节点</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/largest-local-values-in-a-matrix/">2373. 矩阵中的局部最大值</a>|<a href="https://leetcode.cn/problems/largest-local-values-in-a-matrix/">2373. 矩阵中的局部最大值</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a>|<a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/candy/">135. 分发糖果</a>|<a href="https://leetcode.cn/problems/candy/">135. 分发糖果</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/find-xor-sum-of-all-pairs-bitwise-and/">1835. 所有数对按位与结果的异或和</a>|<a href="https://leetcode.cn/problems/find-xor-sum-of-all-pairs-bitwise-and/">1835. 所有数对按位与结果的异或和</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/maximum-building-height/">1840. 最高建筑高度</a>|<a href="https://leetcode.cn/problems/maximum-building-height/">1840. 最高建筑高度</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/maximum-swap/">670. 最大交换</a>|<a href="https://leetcode.cn/problems/maximum-swap/">670. 最大交换</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a>|<a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a>]]<br>  - [[#⚠️思考为什么最后一个值不是最大值?|⚠️思考为什么最后一个值不是最大值?]]</li><li>[[#704. 二分查找|704. 二分查找]]</li><li>[[#<a href="https://leetcode.cn/problems/remove-element/">27. 移除元      素</a>|<a href="https://leetcode.cn/problems/remove-element/">27. 移除元      素</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a>|<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a>]]</li><li>[[#<a href="https://leetcode.cn/problems/third-maximum-number/">414. 第三大的数</a>|<a href="https://leetcode.cn/problems/third-maximum-number/">414. 第三大的数</a>]]</li></ul><h3 id="274-H-指数"><a href="#274-H-指数" class="headerlink" title="274. H 指数"></a><a href="https://leetcode.cn/problems/h-index/">274. H 指数</a></h3><ul><li>一个朴素的思想<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hIndex</span>(<span class="hljs-params">self, citations: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 看了之后就是先排序</span><br>    citations.sort(reverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(citations)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(citations)):<br>        <span class="hljs-comment"># 找到一个index+1 &lt; citations[index]的值</span><br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &gt; citations[i]:<br>            <span class="hljs-keyword">return</span> i<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(citations)<br></code></pre></td></tr></table></figure></li></ul><h3 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></h3><ul><li>思考一下我的代码为什么这么拉跨（想必答案就是缺乏思考哈哈哈哈 形成了闭环）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 感觉是找上升序列的问题</span><br>    <span class="hljs-comment"># 找出所有的上升序列即可</span><br>    <span class="hljs-comment"># 标记上升序列的长度</span><br>    start,end = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    isUp = <span class="hljs-number">0</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(prices)):<br>        <span class="hljs-keyword">if</span> prices[i] &gt;= prices[i-<span class="hljs-number">1</span>]:<br>            isUp = <span class="hljs-number">1</span><br>            end += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            res += prices[end] - prices[start]<br>            start = end+<span class="hljs-number">1</span><br>            end = start<br>            isUp = <span class="hljs-number">0</span><br>    res += prices[end] - prices[start]<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></li><li>优雅的代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 优雅的代码就是不一样</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    profit = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 遍历价格数组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(prices)):<br>        <span class="hljs-comment"># 如果今天的价格比昨天高，就认为可以进行一次交易</span><br>        <span class="hljs-keyword">if</span> prices[i] &gt; prices[i-<span class="hljs-number">1</span>]:<br>            profit += prices[i] - prices[i-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> profit<br></code></pre></td></tr></table></figure></li></ul><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h3><ul><li>看了以前写的代码写出来了</li><li>核心思想是维护两个变量</li><li>如果有多只股票呢<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 关键就是遍历与维护变量</span><br>    cost = sys.maxsize<br>    profit = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> prices:<br>        <span class="hljs-keyword">if</span> item &lt; cost:<br>            cost = item<br>        <span class="hljs-keyword">if</span> item - cost &gt; profit:<br>            profit = item - cost<br>    <span class="hljs-keyword">return</span> profit<br></code></pre></td></tr></table></figure></li></ul><h3 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a><a href="https://leetcode.cn/problems/3sum-closest/">16. 最接近的三数之和</a></h3><ul><li>思考这和传统“三数之和”有什么区别？</li><li>本题说明：最后只包含一个解，所以不需要考虑去重<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最接近的三数之和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSumClosest</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 三数之和的简化版</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 首先对数组进行排序</span><br>    nums.sort()<br>    minSub = nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] + nums[<span class="hljs-number">2</span>] - target<br><br>    <span class="hljs-comment"># 首先固定一个元素 然后进行双指针</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>        left, right = i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            sumThree = nums[i] + nums[left] + nums[right]<br>            minSub = sumThree-target <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(sumThree - target) &lt;= <span class="hljs-built_in">abs</span>(minSub) <span class="hljs-keyword">else</span> minSub<br>            <span class="hljs-keyword">if</span> sumThree &gt; target:<br>                right -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> sumThree &lt; target:<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> minSub + target<br>    <span class="hljs-keyword">return</span> minSub + target<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a><a href="https://leetcode.cn/problems/regular-expression-matching/">10. 正则表达式匹配</a></h3><p>这个问题是一个经典的动态规划（Dynamic Programming，DP）问题，你正在尝试实现一个匹配字符串 <code>s</code> 和模式 <code>p</code> 的函数。在这种情况下，模式 <code>p</code> 可以包含普通字符和两个特殊字符:</p><ol><li><code>.</code> - 可以匹配任何单个字符</li><li><code>*</code> - 匹配零个或多个前面的那一个元素<br>![[Pasted image 20240402211458.png]]<br>这种情况下：<code>dp[i][j] = dp[i-2][j]</code><br>![[Pasted image 20240402211440.png]]<br>这种情况下：<code>dp[i][j] = dp[i][j-1]</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">isMatch</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    l1, l2 = <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">len</span>(p)<br>    dp = [[<span class="hljs-literal">False</span>] * (l1+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l2+<span class="hljs-number">1</span>)]<br>    <span class="hljs-comment"># 初始化dp数组</span><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, l2+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> p[i-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>            dp[i][<span class="hljs-number">0</span>] = dp[i-<span class="hljs-number">2</span>][<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 开始dp过程</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l2+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l1+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> p[i-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span>:<br>                <span class="hljs-keyword">if</span> p[i-<span class="hljs-number">2</span>] == s[j-<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> p[i-<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;.&#x27;</span>:<br>                    <span class="hljs-comment"># a * 出现1次或多次</span><br>                    dp[i][j] = dp[i][j-<span class="hljs-number">1</span>]<br>                <span class="hljs-comment"># a * 可匹配0次</span><br>                <span class="hljs-comment"># 如果之前 dp[i][j] 已经是 True，或者如果消掉 *（和它前面的字符）后能够匹配 (dp[i-2][j] 是 True), 那么 dp[i][j] 应该为 True</span><br>                <span class="hljs-comment"># 等价于dp[i][j] = dp[i][j] or dp[i-2][j]</span><br>                dp[i][j] |= dp[i-<span class="hljs-number">2</span>][j]<br>            <span class="hljs-keyword">elif</span> p[i-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">or</span> p[i-<span class="hljs-number">1</span>] == s[j-<span class="hljs-number">1</span>]:<br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> dp[l2][l1]<br></code></pre></td></tr></table></figure></li></ol><h3 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a><a href="https://leetcode.cn/problems/longest-common-prefix/">14. 最长公共前缀</a></h3><ul><li>简单题</li><li>注意边界条件的判定<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonPrefix</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> strs:  <span class="hljs-comment"># 检查 strs 是否为空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(strs[<span class="hljs-number">0</span>])):<br>        cur = strs[<span class="hljs-number">0</span>][i]<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> strs[<span class="hljs-number">1</span>:]:<br>            <span class="hljs-comment"># 需要判断长度是否合适</span><br>            <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-built_in">len</span>(item) <span class="hljs-keyword">or</span> item[i] != cur:<br>                <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>][: i]<br>    <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure></li></ul><h3 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a><a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><ul><li>一步一步递推的公式<a href="https://www.bilibili.com/video/BV15h411Z7Qd/?spm_id_from=333.337.search-card.all.click&vd_source=d9475db036bd1ced8053fd2ce6353ceb">编辑距离 - 动态规划解法 Edit Distance - Dynamic Programming_哔哩哔哩_bilibili</a><br>![[Pasted image 20240401142732.png]]</li><li>注意：<br><code>dp = [[0] * l1] * l2</code><br>这行代码创建了一个二维数组 <code>dp</code>，但方式不正确。因为 <code>[[0] * l1] * l2</code> 这种方式复制的是同一个列表的引用。当你修改任意一个 <code>dp[j][i]</code> 的值时，<code>dp</code> 的每一行都会被改变，因为它们实际上是同一个列表的引用。<br>应该用这个<code>dp = [[0] * l1 for _ in range(l2)]</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">minDistance</span>(<span class="hljs-params">self, word1: <span class="hljs-built_in">str</span>, word2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 创建dp数组</span><br>    l1, l2 = <span class="hljs-built_in">len</span>(word1)+<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(word2)+<span class="hljs-number">1</span><br><br>    dp = [[<span class="hljs-number">0</span>] * l1 <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l2)]<br>    <span class="hljs-comment"># 初始化dp数组的第一行和第一列</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l1):<br>        dp[<span class="hljs-number">0</span>][i] = dp[<span class="hljs-number">0</span>][i-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l2):<br>        dp[j][<span class="hljs-number">0</span>] = dp[j-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 进行dp</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l2):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, l1):<br>            <span class="hljs-comment"># 这里需要考虑边界条件，因为i和j包含了空字符串的情况，因此需要-1</span><br>            <span class="hljs-keyword">if</span> word2[i-<span class="hljs-number">1</span>] == word1[j-<span class="hljs-number">1</span>]:<br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 两个不相同</span><br>                dp[i][j] = <span class="hljs-built_in">min</span>(dp[i-<span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>, dp[i]<br>                               [j-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>, dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> dp[l2-<span class="hljs-number">1</span>][l1-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure></li></ul><h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42. 接雨水"></a><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></h3><ul><li>左右数组进行分别遍历<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    left, right = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(height), [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(height)<br>    <span class="hljs-comment"># 首先遍历左边，看左边的最大高度</span><br>    maxLeft = height[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(height)):<br>        <span class="hljs-keyword">if</span> maxLeft &lt; height[i - <span class="hljs-number">1</span>]:<br>            maxLeft = height[i - <span class="hljs-number">1</span>]<br>        left[i] = maxLeft<br>    maxRight = height[<span class="hljs-built_in">len</span>(height) - <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(height) - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> maxRight &lt; height[j + <span class="hljs-number">1</span>]:<br>            maxRight = height[j + <span class="hljs-number">1</span>]<br>        right[j] = maxRight<br><br>    <span class="hljs-comment"># 遍历</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(height) - <span class="hljs-number">1</span>):<br>        res += <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">min</span>(right[k], left[k]) - height[k])<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></li><li>双指针？</li></ul><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></h3><ul><li>这个题目特别的经典</li><li>但是我已经忘了怎么做了</li><li>参考一下coze的思路</li><li>首先进行排序，固定第一个数的index</li><li>然后使用双指针l、r对剩下的数进行筛选<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>    <span class="hljs-comment"># 和为0的话</span><br>    <span class="hljs-comment"># 原地排序</span><br>    nums.sort()<br>    result = []<br>    <span class="hljs-comment"># 我的思路是先固定一个数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">2</span>):<br>        <span class="hljs-comment"># 剩下的就是两数之和问题了</span><br>        <span class="hljs-comment"># 如果不是第一个数</span><br>        <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i-<span class="hljs-number">1</span>]:<br>            <span class="hljs-comment"># 跳过重复值</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment"># 双指针</span><br>        l, r = i + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l &lt; r:<br>            total = nums[i] + nums[l] + nums[r]<br>            <span class="hljs-keyword">if</span> total &lt; <span class="hljs-number">0</span>:<br>                l += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> total &gt; <span class="hljs-number">0</span>:<br>                r -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                result.append([nums[i],nums[l],nums[r]])   <br>                <span class="hljs-comment"># 去重复</span><br>                <span class="hljs-keyword">while</span> l &lt; r <span class="hljs-keyword">and</span> nums[l] == nums[l + <span class="hljs-number">1</span>]: l+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> l&lt; r <span class="hljs-keyword">and</span> nums[r] == nums[r-<span class="hljs-number">1</span>]:r-=<span class="hljs-number">1</span><br>                l+=<span class="hljs-number">1</span><br>                r-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure></li></ul><h3 id="3083-字符串及其反转中是否存在同一子字符串"><a href="#3083-字符串及其反转中是否存在同一子字符串" class="headerlink" title="3083. 字符串及其反转中是否存在同一子字符串"></a><a href="https://leetcode.cn/problems/existence-of-a-substring-in-a-string-and-its-reverse/">3083. 字符串及其反转中是否存在同一子字符串</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">isSubstringPresent</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-comment"># 创建一个set</span><br>    st = <span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> pairwise(s):<br>        st.add((x, y))<br>        <span class="hljs-keyword">if</span> (y, x) <span class="hljs-keyword">in</span> st:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="3084-统计以给定字符开头和结尾的子字符串总数"><a href="#3084-统计以给定字符开头和结尾的子字符串总数" class="headerlink" title="3084. 统计以给定字符开头和结尾的子字符串总数"></a><a href="https://leetcode.cn/problems/count-substrings-starting-and-ending-with-given-character/">3084. 统计以给定字符开头和结尾的子字符串总数</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">countSubstrings</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, c: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 遍历一次 查看c出现的次数</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> item == c:<br>            count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> (count*(count+<span class="hljs-number">1</span>))//<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="2697-字典序最小回文串"><a href="#2697-字典序最小回文串" class="headerlink" title="2697. 字典序最小回文串"></a><a href="https://leetcode.cn/problems/lexicographically-smallest-palindrome/">2697. 字典序最小回文串</a></h3><ul><li>朴素的想法</li><li>实际上不是我的想法，而是灵神的想法哈哈哈<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字典序最小回文串</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makeSmallestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-comment"># 朴素的想法 使用哈希表 找到出现次数不是单数的（中间的不算）</span><br>    <span class="hljs-comment"># 然而事实证明 想得太复杂了</span><br>    <span class="hljs-comment"># 只需要一次遍历就好了</span><br>    sList = <span class="hljs-built_in">list</span>(s)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) // <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">if</span> sList[i] &gt; sList[<span class="hljs-built_in">len</span>(s) - i - <span class="hljs-number">1</span>]:<br>            sList[i] = sList[<span class="hljs-built_in">len</span>(s) - i - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">elif</span> sList[i] &lt; sList[<span class="hljs-built_in">len</span>(s) - i - <span class="hljs-number">1</span>]:<br>            sList[<span class="hljs-built_in">len</span>(s) - i - <span class="hljs-number">1</span>] = sList[i]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(sList)<br></code></pre></td></tr></table></figure></li></ul><h3 id="2375-根据模式串构造最小数字"><a href="#2375-根据模式串构造最小数字" class="headerlink" title="2375. 根据模式串构造最小数字"></a><a href="https://leetcode.cn/problems/construct-smallest-number-from-di-string/">2375. 根据模式串构造最小数字</a></h3><ul><li>先回忆一下灵神讲得东西</li><li>实际上采用的策略是贪心<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据模式串构造最小数字</span><br><span class="hljs-comment"># 下面是抄的</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">smallestNumber</span>(<span class="hljs-params">self, pattern: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-comment"># 根据灵神的思路</span><br>    n = <span class="hljs-built_in">len</span>(pattern)<br>    <span class="hljs-comment"># digits = &#x27;0123456789&#x27;</span><br>    <span class="hljs-built_in">print</span>(digits)<br>    ans = <span class="hljs-built_in">list</span>(digits[<span class="hljs-number">1</span>:n+<span class="hljs-number">2</span>])<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; n:<br>        <span class="hljs-comment"># 如果处于升序</span><br>        <span class="hljs-keyword">if</span> pattern[i] == <span class="hljs-string">&#x27;I&#x27;</span>:<br>            i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">continue</span><br>        i0 = i<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &lt; n <span class="hljs-keyword">and</span> pattern[i] == <span class="hljs-string">&#x27;D&#x27;</span>:<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 反转</span><br>    <br>        ans[i0:i+<span class="hljs-number">1</span>] = ans[i0:i+<span class="hljs-number">1</span>][::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(ans)<br></code></pre></td></tr></table></figure></li></ul><h3 id="2374-边积分最高的节点"><a href="#2374-边积分最高的节点" class="headerlink" title="2374. 边积分最高的节点"></a><a href="https://leetcode.cn/problems/node-with-highest-edge-score/">2374. 边积分最高的节点</a></h3><ul><li>使用一种优雅的做法（来自灵神）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 边积分最高的节点</span><br><span class="hljs-comment"># 一下子从吊车尾的时空占有情况提升到前面，果然代码还得是要优化啊</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edgeScore</span>(<span class="hljs-params">self, edges: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 定义一个score数组 和 最后的maxKey</span><br>    maxKey,maxVal, score = <span class="hljs-number">0</span>,<span class="hljs-number">0</span>, [<span class="hljs-number">0</span>]* <span class="hljs-built_in">len</span>(edges)<br>    <span class="hljs-comment"># 一次遍历搞定</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(edges)):<br>        to = edges[i]<br>        score[to] = score[to] + i<br>        <span class="hljs-keyword">if</span> score[to] &gt; maxVal <span class="hljs-keyword">or</span> (score[to]==maxVal <span class="hljs-keyword">and</span> to &lt; maxKey):<br>            maxKey = to <br>            maxVal = score[to]<br>    <span class="hljs-keyword">return</span> maxKey<br></code></pre></td></tr></table></figure></li><li>有点脱裤子放屁的做法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 边积分最高的节点</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edgeScore</span>(<span class="hljs-params">self, edges: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 首先明确边积分的定义:</span><br>    <span class="hljs-comment"># 指向节点i的所有边的起始编号之和</span><br>    <span class="hljs-comment"># 朴素的想法是使用map</span><br>    degree = OrderedDict()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(edges)):<br>        degree[edges[i]] = i + degree.get(edges[i], <span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 取最大的key,但是这里的key其实是没有排序的,所以会有问题</span><br>    maxKey = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> degree.keys():<br>        <span class="hljs-keyword">if</span> degree.get(maxKey, -<span class="hljs-number">1</span>) &lt; degree[key] <span class="hljs-keyword">or</span> (degree.get(maxKey, -<span class="hljs-number">1</span>) == degree[key] <span class="hljs-keyword">and</span> maxKey &gt; key):<br>            maxKey = key<br><br>    <span class="hljs-keyword">return</span> maxKey<br></code></pre></td></tr></table></figure></li></ul><h3 id="2373-矩阵中的局部最大值"><a href="#2373-矩阵中的局部最大值" class="headerlink" title="2373. 矩阵中的局部最大值"></a><a href="https://leetcode.cn/problems/largest-local-values-in-a-matrix/">2373. 矩阵中的局部最大值</a></h3><ul><li>实际上就是深度学习中的Maxpooling操作<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 矩阵中的局部最大值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">largestLocal</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>    <span class="hljs-comment"># 基本思想是将每次计算的值放在左上角</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(grid) - <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(grid) - <span class="hljs-number">2</span>):<br>            <span class="hljs-comment"># 计算3 * 3矩阵的最大值</span><br>            <span class="hljs-comment"># 请我不要犯傻了，这么简单的问题都要错</span><br>            <span class="hljs-comment"># 首先不要重复使用循环变量♻️</span><br>            <span class="hljs-comment"># 其次，不要只在内层最大值求整行的最大值，而是窗口内的最大值</span><br>            <span class="hljs-comment"># 都没有使用到变量j,怎么会得到正确答案呢?</span><br>            grid[i][j] = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>([item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> grid[k][j:j+<span class="hljs-number">3</span>]])<br>                             <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, i+<span class="hljs-number">3</span>))<br>        grid[i].pop()<br>        grid[i].pop()<br>    grid.pop()<br>    grid.pop()<br>    <span class="hljs-keyword">return</span> grid<br></code></pre></td></tr></table></figure></li></ul><h3 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a></h3><ul><li>使用dfs深度优先遍历，本质上是递归<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不含连续1的非负整数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">numIslands</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i, j</span>):<br>        <span class="hljs-comment"># 请注意i和j的索引范围，一定要包含等号！！！</span><br>        <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i &gt;= <span class="hljs-built_in">len</span>(grid) <span class="hljs-keyword">or</span> j &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j &gt;= <span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>]) <span class="hljs-keyword">or</span> grid[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>            <span class="hljs-keyword">return</span><br>        grid[i][j] = <span class="hljs-string">&#x27;0&#x27;</span><br>        dfs(i+<span class="hljs-number">1</span>, j)<br>        dfs(i-<span class="hljs-number">1</span>, j)<br>        dfs(i, j+<span class="hljs-number">1</span>)<br>        dfs(i, j-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 如果grid = null直接返回</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> grid:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(grid)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>])):<br>            <span class="hljs-keyword">if</span> grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                <span class="hljs-comment"># 这一步会把所有临近的陆地标记成为海洋，一举两得</span><br>                dfs(i, j)<br>                count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure></li></ul><h3 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135. 分发糖果"></a><a href="https://leetcode.cn/problems/candy/">135. 分发糖果</a></h3><ul><li>好久没做了，想到了解法的一半（纯纯凭直觉做的）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分发糖果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">candy</span>(<span class="hljs-params">self, ratings: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 看到相邻问题 直接使用左右两个数组</span><br>    <span class="hljs-comment"># 需要注意的是 左右两边只能计算一次 而不能考虑得过于周全</span><br>    <span class="hljs-comment"># 基础糖果数量</span><br>    baseVal = <span class="hljs-built_in">len</span>(ratings)<br>    <span class="hljs-comment"># 由于相邻的两个孩子有一个要求是评分更高的糖果更多</span><br>    left = [<span class="hljs-number">1</span>] * baseVal<br>    right = [<span class="hljs-number">1</span>] * baseVal<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(ratings)):<br>        <span class="hljs-keyword">if</span> ratings[i-<span class="hljs-number">1</span>] &lt; ratings[i]:<br>            left[i] = left[i-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ratings)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> ratings[i] &gt; ratings[i+<span class="hljs-number">1</span>]:<br>            right[i] = right[i+<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, baseVal):<br>        res += <span class="hljs-built_in">max</span>(right[i], left[i])<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></li><li>常数级别遍历<br>![[Pasted image 20240323203335.png]]<br>![[Pasted image 20240323203347.png]]<br>需要注意的是，评分相同时，后面的那个孩子应该给1个糖果（因为题目中没有说评分一致时糖果也应该一致），同时增加序列长度的记忆功能，当升降序列长度相等时，应该为降序列再增加一个糖果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">candy</span>(<span class="hljs-params">self, ratings: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 使用增长序列的方法来做</span><br>    <span class="hljs-comment"># 初始化一些变量</span><br>    length = <span class="hljs-built_in">len</span>(ratings)<br>    dec, inc, pre, res = <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, length):<br>        <span class="hljs-keyword">if</span> ratings[i] &gt;= ratings[i-<span class="hljs-number">1</span>]:<br>            dec = <span class="hljs-number">0</span><br>            <span class="hljs-comment"># 说明在升序序列</span><br>            pre = pre + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> ratings[i] != ratings[i-<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> <span class="hljs-number">1</span><br>            res += pre<br>            <span class="hljs-comment"># 升序序列的长度</span><br>            inc = pre<br>        <span class="hljs-keyword">else</span>:<br>            dec += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> dec == inc:<br>                dec += <span class="hljs-number">1</span><br>            res += dec<br>            pre = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></li></ul><h3 id="1835-所有数对按位与结果的异或和"><a href="#1835-所有数对按位与结果的异或和" class="headerlink" title="1835. 所有数对按位与结果的异或和"></a><a href="https://leetcode.cn/problems/find-xor-sum-of-all-pairs-bitwise-and/">1835. 所有数对按位与结果的异或和</a></h3><ul><li>优化后的结果（根据分配律进行优化）</li><li>a&amp;c ^b&amp;c &#x3D; (a^b) &amp; c<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 考虑优化算法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getXORSum</span>(<span class="hljs-params">self, arr1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], arr2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># a&amp;c ^ b&amp;c = (a^b) &amp; c</span><br>    <span class="hljs-comment"># 根据这个公式</span><br>    a1 = arr1[<span class="hljs-number">0</span>]<br>    a2 = arr2[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 注意边界条件,因为一个数与自己做异或的结果是0,所以一定要注意边界条件</span><br>    <span class="hljs-comment"># 0 位置的已经取出来了,所以需要从1开始</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr1)):<br>        a1 = a1 ^ arr1[i]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(arr2)):<br>        a2 = a2 ^ arr2[i]<br>    <span class="hljs-keyword">return</span> a1 &amp; a2<br></code></pre></td></tr></table></figure></li><li>一个看似正确但是超过内存限制的暴力算法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 下面的算法会超过内存限制 gg</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getXORSum</span>(<span class="hljs-params">self, arr1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], arr2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 先写一个试试吧</span><br>    andSum = []<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(arr1)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(arr2)):<br>            andSum.append(arr1[i] &amp; arr2[j])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(andSum)&lt;=<span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> andSum[<span class="hljs-number">0</span>]<br>    res = andSum[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(andSum)):<br>        res = res ^ andSum[i]<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure></li></ul><h3 id="1840-最高建筑高度"><a href="#1840-最高建筑高度" class="headerlink" title="1840. 最高建筑高度"></a><a href="https://leetcode.cn/problems/maximum-building-height/">1840. 最高建筑高度</a></h3><ul><li>视频讲解<a href="https://www.bilibili.com/video/BV1uQ4y1f7QH/?spm_id_from=333.337.search-card.all.click">LeetCode LeetCode 1840. Maximum Building Height | Weekly Contest 239</a><br>这个题搞了我半天，最主要的其实是最终高度的计算，视频里的点很关键，如果左右两边的限制高度不一样，则可以人为让他们一样，即让少的一个多爬x个，再直接求两个相同高度的限制中的最高高度。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最大建筑高度</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxBuilding</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, restrictions: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 补充额外限制条件</span><br>    restrictions.append([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>])<br>    restrictions.append([n, n-<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># 排序</span><br>    restrictions.sort()<br>    <span class="hljs-comment"># 遍历限制数组</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(restrictions)):<br>        <span class="hljs-comment"># 有如下限制</span><br>        <span class="hljs-comment"># 相邻两个高度差不能超过1</span><br>        <span class="hljs-comment"># 注意：</span><br>        <span class="hljs-comment"># restrictions[i][0] 表示地的编号</span><br>        <span class="hljs-comment"># restrictions[i][1] 表示地的限制高度</span><br>        restrictions[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(<br>            restrictions[i][<span class="hljs-number">1</span>], restrictions[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + (restrictions[i][<span class="hljs-number">0</span>] - restrictions[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(restrictions)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        restrictions[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(<br>            restrictions[i][<span class="hljs-number">1</span>], restrictions[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + (restrictions[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - restrictions[i][<span class="hljs-number">0</span>]))<br><br>    <span class="hljs-comment"># 遍历得到最大高度</span><br>    maxHeight = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(restrictions)):<br>        id1, h1 = restrictions[i-<span class="hljs-number">1</span>]<br>        id2, h2 = restrictions[i]<br>        maxHeight = <span class="hljs-built_in">max</span>(maxHeight, (h2 + h1 + id2 - id1)//<span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># 可以除2是因为从一个高度到另一个高度可以先上升后下降</span><br>        <span class="hljs-comment"># 来一个形象的例子</span><br>        <span class="hljs-comment">#  / \</span><br>        <span class="hljs-comment"># /   \</span><br>        <span class="hljs-comment">#      \</span><br>    <span class="hljs-keyword">return</span> maxHeight<br></code></pre></td></tr></table></figure></li><li>coze写的代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxBuilding</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, restrictions: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 这个题不会做啊</span><br>    <span class="hljs-comment"># 只能看题解了</span><br><br>    <span class="hljs-comment"># 首先补充约束条件</span><br>    <span class="hljs-comment"># 第一块地不能修建筑</span><br>    restrictions.append([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># 对建筑进行排序</span><br>    restrictions.sort()<br>    <span class="hljs-comment"># 最后一块地的限制建筑高度(实际没有这个限制,主要是给n-1号用的)</span><br>    restrictions.append([n, n-<span class="hljs-number">1</span>])<br><br>    <span class="hljs-comment"># 从左往右遍历,应用限制</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(restrictions)):<br>        <span class="hljs-comment"># 设置restrictions[i][0]块地的限制高度</span><br>        restrictions[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(<br>            restrictions[i][<span class="hljs-number">1</span>], restrictions[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] +<br>            restrictions[i][<span class="hljs-number">0</span>]-restrictions[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br>        )<br>    <span class="hljs-comment"># 从右往左遍历,应用限制(为什么第二个参数是-1？因为0是最后一个需要遍历的值，所以0的下一个就是-1)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(restrictions)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        restrictions[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(<br>            restrictions[i][<span class="hljs-number">1</span>], restrictions[i + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] +<br>            restrictions[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - restrictions[i][<span class="hljs-number">0</span>]<br>        )<br><br>    <span class="hljs-comment"># 在满足所有限制条件下找最高建筑</span><br>    max_h = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(restrictions)):<br>        id1, h1 = restrictions[i - <span class="hljs-number">1</span>]<br>        id2, h2 = restrictions[i]<br>        max_h = <span class="hljs-built_in">max</span>(max_h, (h2 - h1 + id2 - id1) // <span class="hljs-number">2</span> + h1)<br>    <span class="hljs-keyword">return</span> max_h<br></code></pre></td></tr></table></figure></li><li>复习写的代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxBuilding</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, restrictions: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 首先添加虚拟建筑</span><br>    restrictions.append([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>])<br>    restrictions.append([n, n-<span class="hljs-number">1</span>])<br>    restrictions.sort()<br><br>    <span class="hljs-comment"># 从左到右遍历</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(restrictions)):<br>        restrictions[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(<br>            restrictions[i][<span class="hljs-number">1</span>], restrictions[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+(restrictions[i][<span class="hljs-number">0</span>]-restrictions[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]))<br><br>    <span class="hljs-comment"># 从右往左遍历</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(restrictions)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        restrictions[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(<br>            restrictions[i][<span class="hljs-number">1</span>], restrictions[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+(restrictions[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-restrictions[i][<span class="hljs-number">0</span>]))<br><br>    <span class="hljs-comment"># 找到最大建筑</span><br>    maxHeight = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(restrictions), <span class="hljs-number">1</span>):<br>        index1, height1 = restrictions[i-<span class="hljs-number">1</span>]<br>        index2, height2 = restrictions[i]<br>        maxHeight = <span class="hljs-built_in">max</span>(<br>            maxHeight, ((index2-index1)+(height2-height1))//<span class="hljs-number">2</span>+height1)<br>    <span class="hljs-keyword">return</span> maxHeight<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="670-最大交换"><a href="#670-最大交换" class="headerlink" title="670. 最大交换"></a><a href="https://leetcode.cn/problems/maximum-swap/">670. 最大交换</a></h3><ul><li>3.23复习<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3/23最大交换</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSwap</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 目标：找到x右侧比x大的数</span><br>    <span class="hljs-comment"># 忘了昨天怎么做的了</span><br>    <span class="hljs-comment"># 盲猜从右向左遍历</span><br>    <span class="hljs-comment"># 首先转换int为数组</span><br>    numList = [<span class="hljs-built_in">int</span>(digit) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(num)]<br>    <span class="hljs-comment"># 记录每个数字最后出现的位置</span><br>    lastSeen = &#123;x: i <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numList)&#125;<br>    <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numList):<br>        <span class="hljs-comment"># 从9-(x+1)的范围内找数,看看是不是在右边,从大往小找</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>, x, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> lastSeen.get(j, -<span class="hljs-number">1</span>) &gt; i:<br>                <span class="hljs-comment"># 说明找到了</span><br>                <span class="hljs-comment"># 交换</span><br>                numList[i], numList[lastSeen.get(<br>                    j)] = numList[lastSeen.get(j)], numList[i]<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, numList)))<br>    <span class="hljs-keyword">return</span> num<br></code></pre></td></tr></table></figure></li><li>一种朴素且错误的思维<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这个版本有问题</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSwap</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 一个朴素的想法是把最大的值和第一位交换，得到的总是较大的</span><br>    <span class="hljs-comment"># 遍历一次数组</span><br>    <span class="hljs-comment"># 把num转换成字符串</span><br>    listNum = self.intToList(num)<br>    maxIndex = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(listNum)):<br>        maxIndex = maxIndex <span class="hljs-keyword">if</span> listNum[maxIndex] &gt; listNum[i] <span class="hljs-keyword">else</span> i<br>    <span class="hljs-comment"># swap</span><br>    listNum[<span class="hljs-number">0</span>], listNum[maxIndex] = listNum[maxIndex], listNum[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> self.listToInt(listNum)<br><br><span class="hljs-comment"># 想法果然还是太过于朴素了，因为完全没有考虑到最大的值已经在最高位的情况</span><br><span class="hljs-comment"># 那应该怎么做？把第二大的放到第二位？也不可行，需要考虑的有点多</span><br><span class="hljs-comment"># 比如98368这个数字</span><br><span class="hljs-comment"># 第二大的是8 但是8已经在第2位了</span><br><span class="hljs-comment"># 继续下去？</span><br><span class="hljs-comment"># 复杂度直接进化到O(N^2)了</span><br></code></pre></td></tr></table></figure></li><li>我愿称coze为yyds<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 最大交换</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intToList</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>:<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(digit) <span class="hljs-keyword">for</span> digit <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(n)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">listToInt</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, nums)))<br>    <span class="hljs-comment"># coze协作编程代码</span><br>    <span class="hljs-comment"># 方法很巧妙</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSwap</span>(<span class="hljs-params">self, num: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 把num转换成数组</span><br>        numList = self.intToList(num)<br>        <span class="hljs-comment"># 记录每个数字最后出现的位置(用了一个字典，如果有重复值，则会更新位置，由于是从前到后遍历，所以可以保证是最后出现的)</span><br>        last = &#123;x: i <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numList)&#125;<br>        <span class="hljs-comment"># 从左到右遍历数组</span><br>        <span class="hljs-keyword">for</span> i, x <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numList):<br>            <span class="hljs-comment"># 从9到x + 1查找可能的最大值（倒序查找，找到x右侧比x大的数）</span><br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>, x, -<span class="hljs-number">1</span>):<br>                <span class="hljs-comment"># 如果找到更大值，并且该更大值的索引在当前索引的右侧</span><br>                <span class="hljs-keyword">if</span> last.get(d, -<span class="hljs-number">1</span>) &gt; i:<br>                    <span class="hljs-comment"># 交换这两个值</span><br>                    numList[i], numList[last[d]] = numList[last[d]], numList[i]<br>                    <span class="hljs-comment"># 由于只允许交换一次，直接返回结果</span><br>                    <span class="hljs-keyword">return</span> self.listToInt(numList)<br>        <span class="hljs-comment"># 如果没有交换发生，直接返回原数</span><br>        <span class="hljs-keyword">return</span> num<br></code></pre></td></tr></table></figure></li></ul><h3 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a></h3><ul><li>错误的双指针法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最大子数组和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 看到题目想到的就是滑动窗口</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nums) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 初始化两个指针</span><br>    left, right = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    maxVal = -sys.maxsize - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (right &lt; <span class="hljs-built_in">len</span>(nums)):<br>        <span class="hljs-comment"># 当前窗口和</span><br>        curVal = self.subArraySum(nums, left, right)<br>        maxVal = maxVal <span class="hljs-keyword">if</span> maxVal &gt;= curVal <span class="hljs-keyword">else</span> curVal<br>        <span class="hljs-comment"># 移动指针</span><br>        <span class="hljs-comment"># 做到这里 感觉好像找不到移动指针的方法了...</span><br>        <span class="hljs-comment"># 但是通过思考发现 好像可以用动态规划</span><br>        right += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure></li><li>正确的动态规划法（卡登算法？）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 最大子数组和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-comment"># 使用动态规划来解决这个问题</span><br>    <span class="hljs-comment"># 首先初始化dp数组</span><br>    dp = [nums[<span class="hljs-number">0</span>]] * <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>        dp[i] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>]+nums[i], nums[i])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp)<br></code></pre></td></tr></table></figure></li></ul><h5 id="⚠️思考为什么最后一个值不是最大值"><a href="#⚠️思考为什么最后一个值不是最大值" class="headerlink" title="⚠️思考为什么最后一个值不是最大值?"></a>⚠️思考为什么最后一个值不是最大值?</h5><p>因为dp[i]的值是以nums[i]结尾的子数组的最大和，所以并不是全局最大和</p><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h3><p>很简单，注意边界条件需要包含等于，否则只有一个元素的情况下会直接返回-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        lens = <span class="hljs-built_in">len</span>(nums)<br>        l, r = <span class="hljs-number">0</span>, lens - <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 注意边界条件</span><br>        <span class="hljs-keyword">while</span> (l &lt;= r):<br>            m = (l + r) &gt;&gt; <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> nums[m] == target:<br>                <span class="hljs-keyword">return</span> m<br>            <span class="hljs-keyword">elif</span> nums[m] &lt; target:<br>                l = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                r = m - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">27. 移除元素</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 看到这个题的第一眼就是双指针</span><br><br>        slow, fast = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>        l = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-comment"># slow指针用来指示目标数组的位置</span><br>        <span class="hljs-comment"># fast指正用来遍历数组，找到目标元素</span><br>        <span class="hljs-keyword">while</span>(fast &lt; l):<br>            <span class="hljs-comment"># 找到了目标元素</span><br>            <span class="hljs-keyword">if</span> nums[fast]==val:<br>                <span class="hljs-comment"># slow指针停在原地，等待找到下一个非目标元素替换掉</span><br>                fast += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 如果不是目标元素</span><br>            <span class="hljs-keyword">else</span>:<br>                nums[slow] = nums[fast]<br>                fast += <span class="hljs-number">1</span><br>                slow += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> slow<br>        <br></code></pre></td></tr></table></figure><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortedSquares</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-comment"># 由于数组是有序的，所有可以考虑使用双指针法，从左右两端分别遍历</span><br>        l = <span class="hljs-built_in">len</span>(nums)<br>        left, right = <span class="hljs-number">0</span>, l - <span class="hljs-number">1</span><br>        result = [<span class="hljs-number">0</span>] * l<br>        index = l - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right):<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(nums[left]) &gt;= <span class="hljs-built_in">abs</span>(nums[right])):<br>                result[index] = (nums[left] * nums[left])<br>                left += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                result[index] = (nums[right] * nums[right])<br>                right -= <span class="hljs-number">1</span><br>            index -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> result<br>        <br></code></pre></td></tr></table></figure><h3 id="414-第三大的数"><a href="#414-第三大的数" class="headerlink" title="414. 第三大的数"></a><a href="https://leetcode.cn/problems/third-maximum-number/">414. 第三大的数</a></h3><ul><li>一种错误的解法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 第三大的数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">thirdMax</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># 最简单的方法就是排序之后选第3大的</span><br>        <span class="hljs-comment"># 但是进一步思考，如果只需要第3大的，还需要对所有数组排序吗</span><br>        <span class="hljs-comment"># 看上去是不需要的，因此这里使用冒泡排序找到第三大的即可</span><br>        <span class="hljs-comment"># 时间复杂度O(3N)</span><br>        length = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length <span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, length):<br>                <span class="hljs-keyword">if</span> nums[i] &gt; nums[j]:<br>                    <span class="hljs-comment"># swap</span><br>                    nums[i], nums[j] = nums[j], nums[i]<br>        <span class="hljs-built_in">print</span>(nums)<br>        <span class="hljs-comment"># 事实证明这样的解法是有bug的，因为nums中可能有重复的值，所以还需要进行去重操作</span><br>        <span class="hljs-comment"># 一种想到的思路是维护一个集合，用来去重，但是不如一开始就用集合，所以这样是脱裤子放屁</span><br>        <span class="hljs-keyword">return</span> nums[-<span class="hljs-number">3</span>] <span class="hljs-keyword">if</span> length &gt;= <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> nums[-<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure></li><li>正确的高效解法：运用集合去重（注意事项：边界条件）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">thirdMax</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>  <span class="hljs-comment"># 维护一个集合，使得集合中只有3个数，并且超出时删除最小的</span><br>  s = <span class="hljs-built_in">set</span>()<br>  <span class="hljs-comment"># 遍历数组</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)):<br>    s.add(nums[i])<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) &gt; <span class="hljs-number">3</span>:<br>      <span class="hljs-comment"># 删除集合中最小的值</span><br>      minValue = <span class="hljs-built_in">min</span>(s)<br>      s.remove(minValue)<br>    <span class="hljs-built_in">print</span>(s)<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(s) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) &gt;= <span class="hljs-number">3</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">max</span>(s)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>算法学习</tag>
      
      <tag>计划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mit 6.s081 lab1</title>
    <link href="/2024/02/21/mit-6-s081-lab1/"/>
    <url>/2024/02/21/mit-6-s081-lab1/</url>
    
    <content type="html"><![CDATA[<h1 id="mit-6-s081-lab1"><a href="#mit-6-s081-lab1" class="headerlink" title="mit 6.s081 lab1"></a>mit 6.s081 lab1</h1><h2 id="sleep-easy"><a href="#sleep-easy" class="headerlink" title="sleep(easy)"></a>sleep(easy)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>  <span class="hljs-comment">// If the user forgets to pass an argument, sleep should print an error message.</span><br>  <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>)<br>  &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;usage: sleep &lt;number&gt;\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-comment">// The command-line argument is passed as a string; you can convert it to an integer using atoi (see user/ulib.c).</span><br>  <span class="hljs-type">int</span> sleepTime = atoi(argv[<span class="hljs-number">1</span>]);<br>  <span class="hljs-comment">// Use the system call sleep.</span><br>  sleep(sleepTime);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="pingpong-easy"><a href="#pingpong-easy" class="headerlink" title="pingpong(easy)"></a>pingpong(easy)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>  <span class="hljs-comment">// the byte to be sent</span><br>  <span class="hljs-type">char</span> *ping = <span class="hljs-string">&quot;p&quot;</span>;<br>  <span class="hljs-comment">// pipe file descriptors</span><br>  <span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>];<br>  <span class="hljs-comment">// create pipe</span><br>  pipe(fd);<br>  <span class="hljs-comment">// fd[0] for read</span><br>  <span class="hljs-comment">// fd[1] for write</span><br>  <span class="hljs-comment">// create child process</span><br>  <span class="hljs-type">int</span> cpid = fork();<br>  <span class="hljs-keyword">if</span> (cpid == <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-comment">// child process</span><br>    <span class="hljs-comment">// read a byte from the pipe</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (read(fd[<span class="hljs-number">0</span>], buf, <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)<br>    &#123;<br>      <span class="hljs-comment">// the child should print &quot;&lt;pid&gt;: received ping&quot;</span><br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;received a byte from the pipe: %s\n&quot;</span>, buf);<br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;%d: received ping\n&quot;</span>, getpid());<br>      close(fd[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">// write the byte on the pipe to the parent</span><br>    write(fd[<span class="hljs-number">1</span>], buf, <span class="hljs-number">1</span>);<br>    close(fd[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">// exit</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cpid &gt; <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-comment">// parent process</span><br>    <span class="hljs-comment">// The parent should send a byte to the child</span><br>    write(fd[<span class="hljs-number">1</span>], ping, <span class="hljs-number">1</span>);<br>    close(fd[<span class="hljs-number">1</span>]);<br>    <span class="hljs-comment">// wait for the child to finish</span><br>    wait(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// read the byte from the child</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (read(fd[<span class="hljs-number">0</span>], buf, <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)<br>    &#123;<br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;received a byte from the pipe: %s\n&quot;</span>, buf);<br>      <span class="hljs-comment">// print &quot;&lt;pid&gt;: received pong&quot;</span><br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;%d: received pong\n&quot;</span>, getpid());<br>      close(fd[<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-comment">// exit</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="primes-hard"><a href="#primes-hard" class="headerlink" title="primes(hard)"></a>primes(hard)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>])</span><br>&#123;<br>  <span class="hljs-type">int</span> receivedNum;<br>  <span class="hljs-type">int</span> currentPrime;<br><br>  close(fd[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">if</span> (read(fd[<span class="hljs-number">0</span>], &amp;currentPrime, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span>)<br>  &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;read error\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-comment">// the first number received must be a prime number</span><br>  <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;prime %d\n&quot;</span>, currentPrime);<br><br>  <span class="hljs-comment">// judge whether the next is not exist</span><br>  <span class="hljs-keyword">if</span> (read(fd[<span class="hljs-number">0</span>], &amp;receivedNum, <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>)<br>  &#123;<br>    close(fd[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// !!!!!!!!! SHOULD CREATE NEW PIPE !!!!!!!!!</span><br>  <span class="hljs-type">int</span> newfd[<span class="hljs-number">2</span>];<br>  pipe(newfd);<br><br>  <span class="hljs-comment">// fork a child process</span><br>  <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<br>  &#123;<br>    func(newfd);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    close(newfd[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">// eliminate all the numbers that are multiples of the prime number</span><br>    <span class="hljs-comment">// first should process the &quot;receivedNum&quot; which recevied just now</span><br>    <span class="hljs-keyword">if</span> (receivedNum % currentPrime != <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (write(newfd[<span class="hljs-number">1</span>], &amp;receivedNum, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span>)<br>      &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;write error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// read old pipe and write new pipe</span><br>    <span class="hljs-keyword">while</span> (read(fd[<span class="hljs-number">0</span>], &amp;receivedNum, <span class="hljs-number">4</span>) == <span class="hljs-number">4</span>)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (receivedNum % currentPrime != <span class="hljs-number">0</span>)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (write(newfd[<span class="hljs-number">1</span>], &amp;receivedNum, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span>)<br>        &#123;<br>          <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;write error\n&quot;</span>);<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// no need for every process to close the pipe, just close the pipe in the end</span><br>    close(fd[<span class="hljs-number">0</span>]);<br>    close(newfd[<span class="hljs-number">1</span>]);<br>    wait(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>  <span class="hljs-comment">// create a pipe</span><br>  <span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>];<br>  pipe(fd);<br><br>  <span class="hljs-comment">// use fork create a child process</span><br>  <span class="hljs-type">int</span> cpid = fork();<br><br>  <span class="hljs-keyword">if</span> (cpid == <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-comment">// child process</span><br>    <span class="hljs-comment">// call func</span><br>    func(fd);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cpid &gt; <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-comment">// parent process</span><br>    close(fd[<span class="hljs-number">0</span>]);<br>    <span class="hljs-comment">// pass [2...35] to the child process</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">35</span>; i++)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (write(fd[<span class="hljs-number">1</span>], &amp;i, <span class="hljs-number">4</span>) != <span class="hljs-number">4</span>)<br>      &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;write error\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br>    close(fd[<span class="hljs-number">1</span>]);<br>    wait(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="find-just-follow-hints"><a href="#find-just-follow-hints" class="headerlink" title="find(just follow hints)"></a>find(just follow hints)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/fs.h&quot;</span></span><br><br><span class="hljs-type">char</span> *<span class="hljs-title function_">fmtname</span><span class="hljs-params">(<span class="hljs-type">char</span> *path)</span><br>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">char</span> buf[DIRSIZ + <span class="hljs-number">1</span>];<br>  <span class="hljs-type">char</span> *p;<br><br>  <span class="hljs-comment">// Find first character after last slash.</span><br>  <span class="hljs-keyword">for</span> (p = path + <span class="hljs-built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="hljs-string">&#x27;/&#x27;</span>; p--)<br>    ;<br>  p++;<br><br>  <span class="hljs-comment">// Return blank-padded name.</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(p) &gt;= DIRSIZ)<br>    <span class="hljs-keyword">return</span> p;<br>  memmove(buf, p, <span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-built_in">memset</span>(buf + <span class="hljs-built_in">strlen</span>(p), <span class="hljs-string">&#x27; &#x27;</span>, DIRSIZ - <span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-keyword">return</span> buf;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">findFunc</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span><br>&#123;<br>  <span class="hljs-comment">// modify from ls.c</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>], *p;<br>  <span class="hljs-type">int</span> fd;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><br>  <span class="hljs-keyword">if</span> ((fd = open(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;find: cannot open %s\n&quot;</span>, path);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (fstat(fd, &amp;st) &lt; <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;find: cannot stat %s\n&quot;</span>, path);<br>    close(fd);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">switch</span> (st.type)<br>  &#123;<br>  <span class="hljs-keyword">case</span> T_FILE:<br>    <span class="hljs-comment">// if the raw path is a file, it goes wrong</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Usage: find dir file\n&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-keyword">case</span> T_DIR:<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(path) + <span class="hljs-number">1</span> + DIRSIZ + <span class="hljs-number">1</span> &gt; <span class="hljs-keyword">sizeof</span> buf)<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find: path too long\n&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">strcpy</span>(buf, path);<br>    p = buf + <span class="hljs-built_in">strlen</span>(buf);<br>    *p++ = <span class="hljs-string">&#x27;/&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (read(fd, &amp;de, <span class="hljs-keyword">sizeof</span>(de)) == <span class="hljs-keyword">sizeof</span>(de))<br>    &#123;<br>      <span class="hljs-comment">// ignore the . and ..</span><br>      <span class="hljs-keyword">if</span> (de.inum == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;.&quot;</span>) == <span class="hljs-number">0</span> || <span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;..&quot;</span>) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">continue</span>;<br>      memmove(p, de.name, DIRSIZ);<br>      p[DIRSIZ] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> (stat(buf, &amp;st) &lt; <span class="hljs-number">0</span>)<br>      &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;find: cannot stat %s\n&quot;</span>, buf);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-comment">// if the path is dir</span><br>      <span class="hljs-keyword">if</span> (st.type == T_DIR)<br>      &#123;<br>        <span class="hljs-comment">// recursive call</span><br>        findFunc(buf, name);<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (st.type == T_FILE)<br>      &#123;<br>        <span class="hljs-comment">// if the path is file</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(de.name, name) == <span class="hljs-number">0</span>)<br>        &#123;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br>  close(fd);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>  &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;usage: find &lt;path&gt; &lt;name&gt;\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path = argv[<span class="hljs-number">1</span>];<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name = argv[<span class="hljs-number">2</span>];<br><br>  findFunc(path, name);<br><br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="xargs-not-easy"><a href="#xargs-not-easy" class="headerlink" title="xargs(not easy)"></a>xargs(not easy)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/param.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">readLine</span><span class="hljs-params">(<span class="hljs-type">char</span> **argvlist, <span class="hljs-type">int</span> i)</span><br>&#123;<br>  <span class="hljs-type">int</span> maxBufSize = <span class="hljs-number">1024</span>;<br>  <span class="hljs-type">char</span> buf[maxBufSize];<br>  <span class="hljs-type">int</span> bufSize = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// read one line</span><br>  <span class="hljs-comment">// each loop read one char</span><br>  <span class="hljs-keyword">while</span> (read(<span class="hljs-number">0</span>, buf + bufSize, <span class="hljs-number">1</span>))<br>  &#123;<br>    <span class="hljs-keyword">if</span> (buf[bufSize] == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    &#123;<br>      buf[bufSize] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    bufSize++;<br>    <span class="hljs-keyword">if</span> (bufSize &gt;= maxBufSize)<br>    &#123;<br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;xargs: input too long\n&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (bufSize == <span class="hljs-number">0</span>)<br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// processing space, add to argvlist</span><br>  <span class="hljs-type">int</span> idx = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (idx &lt; bufSize)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (i &gt; MAXARG)<br>    &#123;<br>      <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;xargs: too many arguments\n&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// find the first non-space char</span><br>    <span class="hljs-keyword">while</span> ((idx &lt; bufSize) &amp;&amp; (buf[idx] == <span class="hljs-string">&#x27; &#x27;</span>))<br>    &#123;<br>      idx++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> argsStart = idx;<br>    <span class="hljs-comment">// find the first space char</span><br>    <span class="hljs-keyword">while</span> ((idx &lt; bufSize) &amp;&amp; (buf[idx] != <span class="hljs-string">&#x27; &#x27;</span>))<br>    &#123;<br>      idx++;<br>    &#125;<br>    <span class="hljs-type">int</span> argsEnd = idx;<br>    <span class="hljs-comment">// add args to argvlist</span><br>    argvlist[i] = <span class="hljs-built_in">malloc</span>(argsEnd - argsStart + <span class="hljs-number">1</span>);<br>    buf[idx++] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">strcpy</span>(argvlist[i], buf + argsStart);<br>    i++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>  <span class="hljs-comment">// wait the process before | finish</span><br>  sleep(<span class="hljs-number">3</span>);<br>  <span class="hljs-comment">// argvlist</span><br>  <span class="hljs-type">char</span> *argvlist[MAXARG];<br>  <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">2</span>)<br>  &#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;usage: xargs command\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// add array argv to argvlist</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; argc; i++)<br>    &#123;<br>      <span class="hljs-comment">// manipulate the argvlist</span><br>      argvlist[i - <span class="hljs-number">1</span>] = <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">strlen</span>(argv[i]) + <span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">strcpy</span>(argvlist[i - <span class="hljs-number">1</span>], argv[i]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// read the input from the standard input</span><br>  <span class="hljs-type">int</span> end;<br>  <span class="hljs-keyword">while</span> ((end = readLine(argvlist, argc - <span class="hljs-number">1</span>)) != <span class="hljs-number">-1</span>)<br>  &#123;<br>    argvlist[end] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<br>    &#123;<br>      exec(argvlist[<span class="hljs-number">0</span>], argvlist);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      wait(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>6.s081</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Learning Experience</title>
    <link href="/2023/11/13/Java-Learning-Experience/"/>
    <url>/2023/11/13/Java-Learning-Experience/</url>
    
    <content type="html"><![CDATA[<h2 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h2><ul><li>参考教程：Spring 核心教程 已完结（IDEA 2023最新版）4K蓝光画质 基于Spring6的全新重制版本 起立到起飞（<a href="https://www.bilibili.com/video/BV1Kv4y1x7is%EF%BC%89">https://www.bilibili.com/video/BV1Kv4y1x7is）</a></li></ul><table><thead><tr><th>序号</th><th>视频标题</th><th>是否学习</th><th>学后感</th></tr></thead><tbody><tr><td>1</td><td>Spring基础：走进Spring框架</td><td>✅</td><td>发现自己还有很多没有学懂，但是还有java基础，所以还来得及补习</td></tr><tr><td>2</td><td>Spring基础：IoC理论基础</td><td>✅</td><td>IoC控制反转，IoC容器用来管理Bean</td></tr><tr><td>3</td><td>Spring基础：第一个Spring项目</td><td>✅</td><td>使用idea创建了一个Spring项目</td></tr><tr><td>4</td><td>Spring基础：Bean注册与配置</td><td>✅</td><td>使用xml方式管理bean</td></tr><tr><td>5</td><td>Spring基础：依赖注入</td><td>✅</td><td></td></tr><tr><td>6</td><td>Spring基础：自动装配</td><td>✅</td><td>可以不用手动指定，而是通过ByType或者ByName进行自动装配</td></tr><tr><td>7</td><td>Spring基础：生命周期与继承</td><td>✅</td><td>介绍两个方法，init和destroy</td></tr><tr><td>8</td><td>Spring基础：工厂模式与工厂Bean</td><td>✅</td><td>关于工厂模式</td></tr><tr><td>9</td><td>Spring基础：使用注解开发</td><td>✅</td><td>走神了</td></tr><tr><td>⭐</td><td>笔记整理回顾</td><td></td><td></td></tr><tr><td>⭐</td><td>编程实践</td><td></td><td></td></tr><tr><td>10</td><td>选学：Aware系列接口</td><td></td><td></td></tr><tr><td>11</td><td>选学：任务调度</td><td></td><td></td></tr><tr><td>12</td><td>选学：监听器</td><td></td><td></td></tr><tr><td>13</td><td>SpEL入门：外部属性注入</td><td></td><td></td></tr><tr><td>14</td><td>SpEL入门：简单使用</td><td></td><td></td></tr><tr><td>15</td><td>SpEL入门：集合类相关操作</td><td></td><td></td></tr><tr><td>16</td><td>Spring基础：XML配置AOP</td><td></td><td></td></tr><tr><td>17</td><td>Spring基础：接口实现AOP</td><td></td><td></td></tr><tr><td>18</td><td>Spring基础：注解实现AOP</td><td></td><td></td></tr><tr><td>19</td><td>Mybatis整合：了解数据源</td><td></td><td></td></tr><tr><td>20</td><td>选学：两种数据源实现原理解读</td><td></td><td></td></tr><tr><td>21</td><td>Mybatis整合：整合流程与实现</td><td></td><td></td></tr><tr><td>22</td><td>Mybatis整合：HikariCP连接池</td><td></td><td></td></tr><tr><td>23</td><td>Mybatis整合：事务管理</td><td></td><td></td></tr><tr><td>24</td><td>Mybatis整合：Spring事务</td><td></td><td></td></tr><tr><td>25</td><td>JUnit整合：基本使用</td><td></td><td></td></tr><tr><td>26</td><td>原理探究：Bean的定义与生成</td><td></td><td></td></tr><tr><td>27</td><td>原理探究：单例Bean创建与循环依赖</td><td></td><td></td></tr><tr><td>28</td><td>原理探究：AOP与后置处理器</td><td></td><td></td></tr><tr><td>29</td><td>原理探究：应用程序上下文</td><td></td><td></td></tr><tr><td>30</td><td>原理探究：Mybatis整合原理</td><td></td><td></td></tr></tbody></table><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="Spring基础"><a href="#Spring基础" class="headerlink" title="Spring基础"></a>Spring基础</h3><ul><li>什么是IoC<br>IoC全名<strong>控制反转（Inversion of Control）：</strong>把复杂系统分解成相互合作的对象，这些对象类通过封装以后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。</li><li>为什么需要使用IoC将对象交给IoC容器进行管理，比如当我们需要一个接口的实现时，由它根据配置文件来决定到底给我们哪一个实现类，这样，我们就可以不用再关心我们要去使用哪一个实现类了，我们只需要关心，给到我的一定是一个可以正常使用的实现类。</li><li>创建一个Spring6项目需要干的事情<br>打开idea -&gt; 新建maven项目 -&gt; 引入spring框架 -&gt; 在resource目录下新建application.xml配置文件（使用xml开发）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>什么是Bean</li><li>什么是依赖注入</li><li>自动装配</li><li>注解开发</li><li>生命周期</li><li>bean继承</li><li>工厂模式与bean</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>总览--模型量化</title>
    <link href="/2023/10/18/Model-quantization-survey/"/>
    <url>/2023/10/18/Model-quantization-survey/</url>
    
    <content type="html"><![CDATA[<h2 id="博客文章"><a href="#博客文章" class="headerlink" title="博客文章"></a>博客文章</h2><p>Adabin</p><h2 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h2><table><thead><tr><th>论文</th><th>年份</th><th>会议&#x2F;期刊</th><th>代码链接</th><th>备注</th><th>笔记</th></tr></thead><tbody><tr><td>Adabin: Improving Binary Neural Networks with Adaptive Binary Sets</td><td>2022</td><td>ECCV</td><td></td><td></td><td></td></tr><tr><td>IR-Net: Forward and Backward Information Retention for Accurate Binary Neural Networks</td><td>2020</td><td>CVPR</td><td><a href="https://github.com/htqin/IR-Net">https://github.com/htqin/IR-Net</a></td><td>精读，开启二值化学习之路</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="SOTA模型性能"><a href="#SOTA模型性能" class="headerlink" title="SOTA模型性能"></a>SOTA模型性能</h2><h3 id="CIFAR10"><a href="#CIFAR10" class="headerlink" title="CIFAR10"></a>CIFAR10</h3><h3 id="ImageNet-1K"><a href="#ImageNet-1K" class="headerlink" title="ImageNet-1K"></a>ImageNet-1K</h3><h3 id="CIFAR100"><a href="#CIFAR100" class="headerlink" title="CIFAR100"></a>CIFAR100</h3>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>模型量化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组会笔记</title>
    <link href="/2023/10/15/MeetingNote/"/>
    <url>/2023/10/15/MeetingNote/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="74ea512e2b275aef5897e60b693fe32d7da4b8f6eb9ed708eaed53180acc1a7a">ffb0b1dc140d343e3196a6699eef89033c64c1198e263c66efe345127caf36b87ee1eb0c9dbfd393a601d64156614d835808c0c7d231363ee8133900471cce188973dd5e628f96d93a080a5d4fabee52c5971af461d00767a025d9699dfb933f321e36c50f3deeb685569c5f3d74b6db353ef5ef93a6f02dd496286093330cf60e1f0cccf2f83e3e76697467ba12536ada2eaf2499f7a2345a6238e640f13096491d723b7cda5a8ab8c91c37f7d742cef0652873277b3d378ff39494351886f3ef929083ca84b991bae38a8a3182c3901fff3f512ada684e3992acbe2f2740c1636e552578bddb0c8eb4e610d5648db1ce4a1728af1e43e6b6b3c4aeb5d39def70ef2b328d6b466f805f26e8fe168217707e2e2e5c228610170ee34a3ae7bb9899e43030ef30953cf75e398994bdff50426826c6343c91262923300180a16da188384b30be3119cf39642f9e92e4711a9c55c29b523eede15309d9b6f8625b8ec1eb70dc0c2173cb12fd46bc40e285eaa5865bb7966abab111096ad71206ba3ff9f68138b31e87f4fe96d7a7ffb2adf79d8d366e76ba24258d7f17ca4313eba98e9b28cb3eef327138bdb4198893f9fc2459d2efe8ba8fc092451e3edeeb0ddbbe7fcb443e8b74eac7c81ba478d1348f86545b97cbcdf665c8c699a1f20143a5d6ed8245aefe0d1dba91e4f78a28d39124d2d220ac959342c48e8f5de3d2e3c4f1c15aadfdc7a52eb74ed415ac3d22433459990270a8d724fd7daf263b5640423020195a2632f891de046bf0a8932f043fa6f8384fb557e3b69f38942adfb972fc57f7609fb687967f39bc46bbbce2e8f08d8e007e6613eeb43102e0664d35fdc1309e9334fd5df4e2aca6c98cc906d4447fc85013f492a9fa989400e6070112dc35533cb04524f38637540a76dff334</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>加密</tag>
      
      <tag>笔记</tag>
      
      <tag>组会</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文阅读---Forward and Backward Information Retention for Accurate Binary Neural Networks</title>
    <link href="/2023/10/07/Paper-IR-net/"/>
    <url>/2023/10/07/Paper-IR-net/</url>
    
    <content type="html"><![CDATA[<h2 id="论文原文及笔记"><a href="#论文原文及笔记" class="headerlink" title="论文原文及笔记"></a>论文原文及笔记</h2><div class="row">    <embed src="/pdf/ForwardandBackwardInformationRetentionforAcc.pdf" width="100%" height="550" type="application/pdf"></div><p>就不单独写笔记了，笔记都在PDF上哈哈哈</p><h2 id="PPT分享"><a href="#PPT分享" class="headerlink" title="PPT分享"></a>PPT分享</h2><div class="row">    <embed src="/pdf/meetingPPT.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Graduate from SWJTU</title>
    <link href="/2023/10/06/Graduate-from-SWJTU/"/>
    <url>/2023/10/06/Graduate-from-SWJTU/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>资源---西南交通大学《机器学习实验》课程设计</title>
    <link href="/2023/10/06/ML-CourseDesign/"/>
    <url>/2023/10/06/ML-CourseDesign/</url>
    
    <content type="html"><![CDATA[<h2 id="西南交通大学《机器学习实验》课程设计"><a href="#西南交通大学《机器学习实验》课程设计" class="headerlink" title="西南交通大学《机器学习实验》课程设计"></a>西南交通大学《机器学习实验》课程设计</h2><h3 id="仅供参考，请勿抄袭"><a href="#仅供参考，请勿抄袭" class="headerlink" title="仅供参考，请勿抄袭 "></a><span style="color:red">仅供参考，请勿抄袭 </span></h3><h3 id="回过头来看以前完成的报告，观感上还是很赏心悦目，对得起自己的努力😁"><a href="#回过头来看以前完成的报告，观感上还是很赏心悦目，对得起自己的努力😁" class="headerlink" title="回过头来看以前完成的报告，观感上还是很赏心悦目，对得起自己的努力😁"></a>回过头来看以前完成的报告，观感上还是很赏心悦目，对得起自己的努力😁</h3><div class="row">    <embed src="/pdf/test.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>报告</tag>
      
      <tag>课程设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo加密功能</title>
    <link href="/2023/10/01/Crypto-test/"/>
    <url>/2023/10/01/Crypto-test/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a8d01c49ceae15be7cfdb01c20b7a2749dc5f6e2c9b78dadd430c1571f36b760">f4cc23558ba95030556638b09840cfb704f3786c88b878ba14a45b3d167bfac4a3758146f34aff27dc9729ff3110e5f564ba3564760a046b47e896b73a0aea1063cc682c6c4f64c5c3a047085c27210c5b4608cc3365d4a220e00e9435a5950c698183c9973f3ee48df281a265d8700f70be93009dfeca168ae54e2fda49111832cf553c3f26e494bb40ab375ac2ee430a34e78a2d7165e53bc72c644346ade53bfc8dfd9f23336329766248f2f0b556fb636ee32f4d1410e9fa556bf61ba0b567a461808dbb89f45d3c19d24c6d0db491f7429c0eaa544d1c0d1c9dc6d050e10fd26272cc2f9200323773c5f662c54063d651fdc9215b7d0048e43ad5f6416fbb39b304705c021cb5297b717e25e419ed2daf87151723d110b907abd6a1fcce2da71d900673e52080c402f6831c1b7d036f679bf2680062d717c1b67bbc81515ad57a7ec1142e92462efe576799fa8e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇博客需要密码才能看哦～（悄悄告诉你密码是smile）😊</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>测试博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>加密</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>游记---杭州之旅</title>
    <link href="/2023/09/28/HangZhou-Journal/"/>
    <url>/2023/09/28/HangZhou-Journal/</url>
    
    <content type="html"><![CDATA[<h2 id="抵达前"><a href="#抵达前" class="headerlink" title="抵达前"></a>抵达前</h2><p>此次前去杭州，是为了参加CCCC-移动应用创新赛的决赛，关于这个比赛，是由苹果和浙江大学共同举办的一场关于IOS应用开发的比赛。此处需要感谢我的队友提出富有创意和社会责任感的IDEA，使得我能够前往杭州参加决赛（本人主要负责IDEA的具体实现及开发工作）。此次参赛其实心态很放松，本着学习他人优秀作品以及旅游的态度去的，也没有想过能够拿到比较高的奖项（拿到保底就是胜利）。不过最后的结果却是令人惊喜的，这都是后话了。</p><p>前往杭州，我选择了乘坐天府机场的航班，这也是第一次到传说中“到哪里都是两小时，包括成都市区”的天府机场“赶飞机”，为了省钱，选了红眼航班（凌晨到达）。从电子科大清水河校区到天府机场的确是一段较远的行程，所以也提前预留了机动时间。</p><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>到达杭州其实才凌晨，本着省钱的原则，在机场及其不舒适的椅子上“睡”了一晚上，其实感觉称不上睡……早上地铁开始运行后，就朝着目的地—浙江大学紫金港校区出发了。第一站，先去找已经到达杭州的队友小伙伴会合，答辩前最后一次调试代码，然后在他的酒店房间里面呼呼大睡。等到主办方的报道时间后，一起前往了主办方提供的酒店：浙大圆正启真水晶酒店进行报道。不得不说，还是集训营期间在上海的酒店更好一点（世纪大道旁边的万怡酒店，之后会补充介绍集训营），不过和上次一样的是，也配备了浴缸，可以泡澡了，美滋滋。</p><p>行程安排比较紧凑，上午报道，下午就开始进行决赛的评审了。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
      <tag>生活记录</tag>
      
      <tag>移动应用创新赛</tag>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
